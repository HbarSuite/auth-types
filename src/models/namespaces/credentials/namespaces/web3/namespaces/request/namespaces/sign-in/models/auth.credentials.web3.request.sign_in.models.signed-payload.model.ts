import { _Authentication } from '../../authentication/auth.credentials.web3.request.authentication.namespace'
import { ApiProperty } from '@hsuite/nestjs-swagger'
import { IAuth } from '../../../../../../../../../../interfaces/auth.namespace'

/**
 * Class representing the signed payload for Web3 sign-in process.
 * 
 * @class _SignedPayload
 * @implements {IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedPayload}
 * @namespace Auth.Credentials.Web3.Request.Signin
 * @description Defines the structure and validation of signed payloads used in the Web3 sign-in process.
 * This class handles both the server signature and original authentication payload required for verification.
 * @since 2.0.0
 * @category Authentication
 * @module Auth.Credentials.Web3
 * @public
 * 
 * @property {Uint8Array} serverSignature - The cryptographic signature generated by the server
 * @property {IAuth.ICredentials.IWeb3.IRequest.IAuthentication.IPayload} originalPayload - The original authentication payload
 * 
 * @example
 * const signedPayload = new _SignedPayload({
 *   serverSignature: new Uint8Array([1,2,3]),
 *   originalPayload: new _Authentication.Payload({
 *     url: "https://example.com",
 *     node: "node-1",
 *     data: { token: "abc123" }
 *   })
 * });
 * 
 * @see {@link _Authentication.Payload} For details about the authentication payload structure
 * @see {@link IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedPayload} For the interface implementation
 */
export class _SignedPayload implements IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedPayload {
    /**
     * The cryptographic signature generated by the server to verify the payload.
     * Must be a non-empty Uint8Array containing valid signature bytes.
     * 
     * @type {Uint8Array}
     * @memberof _SignedPayload
     * @public
     * @since 2.0.0
     * @throws {Error} If signature is empty or not a Uint8Array during initialization
     * @remarks This signature is used to cryptographically verify the authenticity of the payload
     * 
     * @example
     * const signature = new Uint8Array([1,2,3,4,5]);
     * signedPayload.serverSignature = signature;
     */
    @ApiProperty({
        description: 'The signature generated by the server to verify the payload',
        type: () => Uint8Array,
        isArray: true
    })
    serverSignature: Uint8Array

    /**
     * The original authentication payload that was signed by the server.
     * Must be a valid instance of Auth.Credentials.Web3.Request.Authentication.Payload.
     * Contains the authentication details like URL, node identifier, and data.
     * 
     * @type {IAuth.ICredentials.IWeb3.IRequest.IAuthentication.IPayload}
     * @memberof _SignedPayload
     * @public
     * @since 2.0.0
     * @throws {Error} If payload is not a valid Authentication.Payload instance during initialization
     * @see {@link _Authentication.Payload} For the payload structure details
     * 
     * @example
     * const payload = new _Authentication.Payload({
     *   url: "https://example.com",
     *   node: "node-1", 
     *   data: { token: "abc123" }
     * });
     * signedPayload.originalPayload = payload;
     */
    @ApiProperty({
        description: 'The original authentication payload that was signed',
        type: () => _Authentication.Payload
    })
    originalPayload: IAuth.ICredentials.IWeb3.IRequest.IAuthentication.IPayload

    /**
     * Creates an instance of _SignedPayload.
     * Validates and initializes the server signature and original payload.
     * 
     * @constructor
     * @param {IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedPayload} signedPayload - The signed payload object
     * @throws {Error} Will throw an error if serverSignature is not a non-empty Uint8Array
     * @throws {Error} Will throw an error if originalPayload is not a valid Authentication.Payload instance
     * @memberof _SignedPayload
     * @since 2.0.0
     * @public
     * 
     * @example
     * try {
     *   const signedPayload = new _SignedPayload({
     *     serverSignature: new Uint8Array([1,2,3]),
     *     originalPayload: new _Authentication.Payload({
     *       url: "https://example.com",
     *       node: "node-1",
     *       data: { token: "abc123" }
     *     })
     *   });
     * } catch (error) {
     *   console.error('Failed to create signed payload:', error.message);
     * }
     */
    constructor(signedPayload: IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedPayload) {
        // Validate server signature is a non-empty Uint8Array
        if (!(signedPayload.serverSignature instanceof Uint8Array)) {
            throw new Error('Server signature must be a Uint8Array')
        }
        if (signedPayload.serverSignature.length === 0) {
            throw new Error('Server signature cannot be empty')
        }
        this.serverSignature = signedPayload.serverSignature

        // Validate original payload is a valid Authentication.Payload instance
        if (!(signedPayload.originalPayload instanceof _Authentication.Payload)) {
            throw new Error('Original payload must be an instance of Auth.Credentials.Web3.Request.Authentication.Payload')
        }
        this.originalPayload = signedPayload.originalPayload
    }
}