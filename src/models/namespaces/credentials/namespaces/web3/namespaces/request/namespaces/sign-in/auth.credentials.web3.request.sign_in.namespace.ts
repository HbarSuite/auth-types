import { ApiSchema } from "@hsuite/nestjs-swagger"
import { _Login } from './models/auth.credentials.web3.request.sign_in.models.login.model'
import { _SignedData } from './models/auth.credentials.web3.request.sign_in.models.signed-data.model'
import { _SignedPayload } from './models/auth.credentials.web3.request.sign_in.models.signed-payload.model'

/**
 * Namespace for Web3 Sign-in related classes.
 * @export _Signin
 * @namespace Auth.Credentials.Web3.Request.Signin
 * @description Contains classes related to the Web3 sign-in process, including signed payloads, signed data, and login requests.
 * This namespace provides a structured way to handle Web3 authentication flows.
 * @since 2.0.0
 * @category Authentication
 * @module Auth.Credentials.Web3
 * @public
 * 
 * @example
 * // Using the SignedPayload class
 * const signedPayload = new _Signin.SignedPayload({
 *   serverSignature: new Uint8Array([1,2,3]),
 *   originalPayload: new Authentication.Payload({...})
 * });
 * 
 * // Using the SignedData class
 * const signedData = new _Signin.SignedData({
 *   signedPayload: signedPayload,
 *   userSignature: new Uint8Array([4,5,6])
 * });
 * 
 * // Using the Login class
 * const login = new _Signin.Login({
 *   operator: { id: "op-123", name: "Test Operator" },
 *   signedData: signedData
 * });
 * 
 * @see SignedPayload
 * @see SignedData 
 * @see Login
 */
export namespace _Signin {
    /**
     * Represents the signed payload for Web3 sign-in.
     * @class SignedPayload
     * @extends {_SignedPayload}
     * @description Encapsulates the server signature and original authentication payload for Web3 sign-in.
     * Contains the cryptographic signature generated by the server and the original payload that was signed.
     * @since 2.0.0
     * @category Authentication
     * @public
     * 
     * @property {Uint8Array} serverSignature - The cryptographic signature from the server
     * @property {IAuth.ICredentials.IWeb3.IRequest.IAuthentication.IPayload} originalPayload - The original authentication payload
     * 
     * @example
     * const signedPayload = new SignedPayload({
     *   serverSignature: new Uint8Array([1,2,3]),
     *   originalPayload: payload
     * });
     * 
     * @see _SignedPayload
     */
    @ApiSchema({ name: 'Auth.Credentials.Web3.Request.SignIn.SignedPayload' })
    export class SignedPayload extends _SignedPayload {}

    /**
     * Represents the signed data for Web3 sign-in.
     * @class SignedData
     * @extends {_SignedData}
     * @description Encapsulates the signed payload and user signature for Web3 authentication.
     * Combines the server-signed payload with the user's cryptographic signature.
     * @since 2.0.0
     * @category Authentication
     * @public
     * 
     * @property {IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedPayload} signedPayload - The signed payload with server signature
     * @property {Uint8Array} userSignature - The user's cryptographic signature
     * 
     * @example
     * const signedData = new SignedData({
     *   signedPayload: signedPayload,
     *   userSignature: new Uint8Array([4,5,6])
     * });
     * 
     * @see _SignedData
     * @see SignedPayload
     */
    @ApiSchema({ name: 'Auth.Credentials.Web3.Request.SignIn.SignedData' })
    export class SignedData extends _SignedData {}

    /**
     * Represents the login request for Web3 sign-in.
     * @class Login
     * @extends {_Login}
     * @description Encapsulates the operator information and signed data for the Web3 login process.
     * Contains all necessary information for authenticating an operator via Web3.
     * @since 2.0.0
     * @category Authentication
     * @public
     * 
     * @property {ISmartNode.IOperator.IEntity} operator - The operator attempting to authenticate
     * @property {IAuth.ICredentials.IWeb3.IRequest.ISignin.ISignedData} signedData - The signed authentication data
     * 
     * @example
     * const login = new Login({
     *   operator: { id: "op-123", name: "Test Operator" },
     *   signedData: signedData
     * });
     * 
     * @see _Login
     * @see SignedData
     */
    @ApiSchema({ name: 'Auth.Credentials.Web3.Request.SignIn.Login' })
    export class Login extends _Login {}
}